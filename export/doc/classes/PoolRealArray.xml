<?xml version="1.0" encoding="UTF-8" ?>
<class name="PoolRealArray" version="3.3">
	<brief_description>
		A pooled [Array] of reals ([float]).
	</brief_description>
	<description>
		An [Array] specifically designed to hold floating-point values. Optimized for memory usage, does not fragment the memory.
		[b]Note:[/b] This type is passed by value and not by reference.
		[b]Note:[/b] Unlike primitive [float]s which are 64-bit, numbers stored in [PoolRealArray] are 32-bit floats. This means values stored in [PoolRealArray] have lower precision compared to primitive [float]s. If you need to store 64-bit floats in an array, use a generic [Array] with [float] elements as these will still be 64-bit. However, using a generic [Array] to store [float]s will use roughly 6 times more memory compared to a [PoolRealArray].
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="PoolRealArray">
			<return type="PoolRealArray">
			</return>
			<argument index="0" name="from" type="Array">
			</argument>
			<description>
				Constructs a new [PoolRealArray]. Optionally, you can pass in a generic [Array] that will be converted.
			</description>
		</method>
		<method name="append">
			<argument index="0" name="value" type="float">
			</argument>
			<description>
				Appends an element at the end of the array (alias of [method push_back]).
			</description>
		</method>
		<method name="append_array">
			<argument index="0" name="array" type="PoolRealArray">
			</argument>
			<description>
				Appends a [PoolRealArray] at the end of this array.
			</description>
		</method>
		<method name="empty">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the array is empty.
			</description>
		</method>
		<method name="insert">
			<return type="int">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="value" type="float">
			</argument>
			<description>
				Inserts a new element at a given position in the array. The position must be valid, or at the end of the array ([code]idx == size()[/code]).
			</description>
		</method>
		<method name="invert">
			<description>
				Reverses the order of the elements in the array.
			</description>
		</method>
		<method name="push_back">
			<argument index="0" name="value" type="float">
			</argument>
			<description>
				Appends an element at the end of the array.
			</description>
		</method>
		<method name="remove">
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
				Removes an element from the array by index.
			</description>
		</method>
		<method name="resize">
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
				Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size.
			</description>
		</method>
		<method name="set">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="value" type="float">
			</argument>
			<description>
				Changes the float at the given index.
			</description>
		</method>
		<method name="size">
			<return type="int">
			</return>
			<description>
				Returns the size of the array.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
