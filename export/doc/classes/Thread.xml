<?xml version="1.0" encoding="UTF-8" ?>
<class name="Thread" inherits="Reference" version="3.3">
	<brief_description>
		A unit of execution in a process.
	</brief_description>
	<description>
		A unit of execution in a process. Can run methods on [Object]s simultaneously. The use of synchronization via [Mutex] or [Semaphore] is advised if working with shared objects.
		[b]Note:[/b] Breakpoints won't break on code if it's running in a thread. This is a current limitation of the GDScript debugger.
	</description>
	<tutorials>
		<link title="Using multiple threads">https://docs.godotengine.org/en/3.3/tutorials/threads/using_multiple_threads.html</link>
		<link title="Thread-safe APIs">https://docs.godotengine.org/en/3.3/tutorials/threads/thread_safe_apis.html</link>
		<link title="3D Voxel Demo">https://godotengine.org/asset-library/asset/676</link>
	</tutorials>
	<methods>
		<method name="get_id" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Returns the current [Thread]'s ID, uniquely identifying it among all threads. If the [Thread] is not running this returns an empty string.
			</description>
		</method>
		<method name="is_active" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if this [Thread] is currently active. An active [Thread] cannot start work on a new method but can be joined with [method wait_to_finish].
			</description>
		</method>
		<method name="start">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="instance" type="Object">
			</argument>
			<argument index="1" name="method" type="String">
			</argument>
			<argument index="2" name="userdata" type="Variant" default="null">
			</argument>
			<argument index="3" name="priority" type="int" enum="Thread.Priority" default="1">
			</argument>
			<description>
				Starts a new [Thread] that runs [code]method[/code] on object [code]instance[/code] with [code]userdata[/code] passed as an argument. Even if no userdata is passed, [code]method[/code] must accept one argument and it will be null. The [code]priority[/code] of the [Thread] can be changed by passing a value from the [enum Priority] enum.
				Returns [constant OK] on success, or [constant ERR_CANT_CREATE] on failure.
			</description>
		</method>
		<method name="wait_to_finish">
			<return type="Variant">
			</return>
			<description>
				Joins the [Thread] and waits for it to finish. Returns what the method called returned.
			</description>
		</method>
	</methods>
	<constants>
		<constant name="PRIORITY_LOW" value="0" enum="Priority">
			A thread running with lower priority than normally.
		</constant>
		<constant name="PRIORITY_NORMAL" value="1" enum="Priority">
			A thread with a standard priority.
		</constant>
		<constant name="PRIORITY_HIGH" value="2" enum="Priority">
			A thread running with higher priority than normally.
		</constant>
	</constants>
</class>
