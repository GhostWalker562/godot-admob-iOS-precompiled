<?xml version="1.0" encoding="UTF-8" ?>
<class name="Vector2" version="3.3">
	<brief_description>
		Vector used for 2D math.
	</brief_description>
	<description>
		2-element structure that can be used to represent positions in 2D space or any other pair of numeric values.
		[b]Note:[/b] In a boolean context, a Vector2 will evaluate to [code]false[/code] if it's equal to [code]Vector2(0, 0)[/code]. Otherwise, a Vector2 will always evaluate to [code]true[/code].
	</description>
	<tutorials>
		<link title="Math tutorial index">https://docs.godotengine.org/en/3.3/tutorials/math/index.html</link>
		<link title="Vector math">https://docs.godotengine.org/en/3.3/tutorials/math/vector_math.html</link>
		<link title="Advanced vector math">https://docs.godotengine.org/en/3.3/tutorials/math/vectors_advanced.html</link>
		<link title="3Blue1Brown Essence of Linear Algebra">https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab</link>
		<link title="Matrix Transform Demo">https://godotengine.org/asset-library/asset/584</link>
		<link title="All 2D Demos">https://github.com/godotengine/godot-demo-projects/tree/master/2d</link>
	</tutorials>
	<methods>
		<method name="Vector2">
			<return type="Vector2">
			</return>
			<argument index="0" name="x" type="float">
			</argument>
			<argument index="1" name="y" type="float">
			</argument>
			<description>
				Constructs a new Vector2 from the given [code]x[/code] and [code]y[/code].
			</description>
		</method>
		<method name="abs">
			<return type="Vector2">
			</return>
			<description>
				Returns a new vector with all components in absolute values (i.e. positive).
			</description>
		</method>
		<method name="angle">
			<return type="float">
			</return>
			<description>
				Returns this vector's angle with respect to the positive X axis, or [code](1, 0)[/code] vector, in radians.
				For example, [code]Vector2.RIGHT.angle()[/code] will return zero, [code]Vector2.DOWN.angle()[/code] will return [code]PI / 2[/code] (a quarter turn, or 90 degrees), and [code]Vector2(1, -1).angle()[/code] will return [code]-PI / 4[/code] (a negative eighth turn, or -45 degrees).
				Equivalent to the result of [method @GDScript.atan2] when called with the vector's [member y] and [member x] as parameters: [code]atan2(y, x)[/code].
			</description>
		</method>
		<method name="angle_to">
			<return type="float">
			</return>
			<argument index="0" name="to" type="Vector2">
			</argument>
			<description>
				Returns the angle to the given vector, in radians.
			</description>
		</method>
		<method name="angle_to_point">
			<return type="float">
			</return>
			<argument index="0" name="to" type="Vector2">
			</argument>
			<description>
				Returns the angle between the line connecting the two points and the X axis, in radians.
			</description>
		</method>
		<method name="aspect">
			<return type="float">
			</return>
			<description>
				Returns the aspect ratio of this vector, the ratio of [member x] to [member y].
			</description>
		</method>
		<method name="bounce">
			<return type="Vector2">
			</return>
			<argument index="0" name="n" type="Vector2">
			</argument>
			<description>
				Returns the vector "bounced off" from a plane defined by the given normal.
			</description>
		</method>
		<method name="ceil">
			<return type="Vector2">
			</return>
			<description>
				Returns the vector with all components rounded up (towards positive infinity).
			</description>
		</method>
		<method name="clamped">
			<return type="Vector2">
			</return>
			<argument index="0" name="length" type="float">
			</argument>
			<description>
				Returns the vector with a maximum length by limiting its length to [code]length[/code].
			</description>
		</method>
		<method name="cross">
			<return type="float">
			</return>
			<argument index="0" name="with" type="Vector2">
			</argument>
			<description>
				Returns the cross product of this vector and [code]with[/code].
			</description>
		</method>
		<method name="cubic_interpolate">
			<return type="Vector2">
			</return>
			<argument index="0" name="b" type="Vector2">
			</argument>
			<argument index="1" name="pre_a" type="Vector2">
			</argument>
			<argument index="2" name="post_b" type="Vector2">
			</argument>
			<argument index="3" name="weight" type="float">
			</argument>
			<description>
				Cubically interpolates between this vector and [code]b[/code] using [code]pre_a[/code] and [code]post_b[/code] as handles, and returns the result at position [code]weight[/code]. [code]weight[/code] is on the range of 0.0 to 1.0, representing the amount of interpolation.
			</description>
		</method>
		<method name="direction_to">
			<return type="Vector2">
			</return>
			<argument index="0" name="b" type="Vector2">
			</argument>
			<description>
				Returns the normalized vector pointing from this vector to [code]b[/code]. This is equivalent to using [code](b - a).normalized()[/code].
			</description>
		</method>
		<method name="distance_squared_to">
			<return type="float">
			</return>
			<argument index="0" name="to" type="Vector2">
			</argument>
			<description>
				Returns the squared distance between this vector and [code]b[/code].
				This method runs faster than [method distance_to], so prefer it if you need to compare vectors or need the squared distance for some formula.
			</description>
		</method>
		<method name="distance_to">
			<return type="float">
			</return>
			<argument index="0" name="to" type="Vector2">
			</argument>
			<description>
				Returns the distance between this vector and [code]to[/code].
			</description>
		</method>
		<method name="dot">
			<return type="float">
			</return>
			<argument index="0" name="with" type="Vector2">
			</argument>
			<description>
				Returns the dot product of this vector and [code]with[/code]. This can be used to compare the angle between two vectors. For example, this can be used to determine whether an enemy is facing the player.
				The dot product will be [code]0[/code] for a straight angle (90 degrees), greater than 0 for angles narrower than 90 degrees and lower than 0 for angles wider than 90 degrees.
				When using unit (normalized) vectors, the result will always be between [code]-1.0[/code] (180 degree angle) when the vectors are facing opposite directions, and [code]1.0[/code] (0 degree angle) when the vectors are aligned.
				[b]Note:[/b] [code]a.dot(b)[/code] is equivalent to [code]b.dot(a)[/code].
			</description>
		</method>
		<method name="floor">
			<return type="Vector2">
			</return>
			<description>
				Returns the vector with all components rounded down (towards negative infinity).
			</description>
		</method>
		<method name="is_equal_approx">
			<return type="bool">
			</return>
			<argument index="0" name="v" type="Vector2">
			</argument>
			<description>
				Returns [code]true[/code] if this vector and [code]v[/code] are approximately equal, by running [method @GDScript.is_equal_approx] on each component.
			</description>
		</method>
		<method name="is_normalized">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the vector is normalized, [code]false[/code] otherwise.
			</description>
		</method>
		<method name="length">
			<return type="float">
			</return>
			<description>
				Returns the length (magnitude) of this vector.
			</description>
		</method>
		<method name="length_squared">
			<return type="float">
			</return>
			<description>
				Returns the squared length (squared magnitude) of this vector.
				This method runs faster than [method length], so prefer it if you need to compare vectors or need the squared distance for some formula.
			</description>
		</method>
		<method name="linear_interpolate">
			<return type="Vector2">
			</return>
			<argument index="0" name="to" type="Vector2">
			</argument>
			<argument index="1" name="weight" type="float">
			</argument>
			<description>
				Returns the result of the linear interpolation between this vector and [code]to[/code] by amount [code]weight[/code]. [code]weight[/code] is on the range of 0.0 to 1.0, representing the amount of interpolation.
			</description>
		</method>
		<method name="move_toward">
			<return type="Vector2">
			</return>
			<argument index="0" name="to" type="Vector2">
			</argument>
			<argument index="1" name="delta" type="float">
			</argument>
			<description>
				Moves the vector toward [code]to[/code] by the fixed [code]delta[/code] amount.
			</description>
		</method>
		<method name="normalized">
			<return type="Vector2">
			</return>
			<description>
				Returns the vector scaled to unit length. Equivalent to [code]v / v.length()[/code].
			</description>
		</method>
		<method name="posmod">
			<return type="Vector2">
			</return>
			<argument index="0" name="mod" type="float">
			</argument>
			<description>
				Returns a vector composed of the [method @GDScript.fposmod] of this vector's components and [code]mod[/code].
			</description>
		</method>
		<method name="posmodv">
			<return type="Vector2">
			</return>
			<argument index="0" name="modv" type="Vector2">
			</argument>
			<description>
				Returns a vector composed of the [method @GDScript.fposmod] of this vector's components and [code]modv[/code]'s components.
			</description>
		</method>
		<method name="project">
			<return type="Vector2">
			</return>
			<argument index="0" name="b" type="Vector2">
			</argument>
			<description>
				Returns the vector projected onto the vector [code]b[/code].
			</description>
		</method>
		<method name="reflect">
			<return type="Vector2">
			</return>
			<argument index="0" name="n" type="Vector2">
			</argument>
			<description>
				Returns the vector reflected from a plane defined by the given normal.
			</description>
		</method>
		<method name="rotated">
			<return type="Vector2">
			</return>
			<argument index="0" name="phi" type="float">
			</argument>
			<description>
				Returns the vector rotated by [code]phi[/code] radians. See also [method @GDScript.deg2rad].
			</description>
		</method>
		<method name="round">
			<return type="Vector2">
			</return>
			<description>
				Returns the vector with all components rounded to the nearest integer, with halfway cases rounded away from zero.
			</description>
		</method>
		<method name="sign">
			<return type="Vector2">
			</return>
			<description>
				Returns the vector with each component set to one or negative one, depending on the signs of the components. If a component is zero, it returns positive one.
			</description>
		</method>
		<method name="slerp">
			<return type="Vector2">
			</return>
			<argument index="0" name="to" type="Vector2">
			</argument>
			<argument index="1" name="weight" type="float">
			</argument>
			<description>
				Returns the result of spherical linear interpolation between this vector and [code]to[/code], by amount [code]weight[/code]. [code]weight[/code] is on the range of 0.0 to 1.0, representing the amount of interpolation.
				[b]Note:[/b] Both vectors must be normalized.
			</description>
		</method>
		<method name="slide">
			<return type="Vector2">
			</return>
			<argument index="0" name="n" type="Vector2">
			</argument>
			<description>
				Returns this vector slid along a plane defined by the given normal.
			</description>
		</method>
		<method name="snapped">
			<return type="Vector2">
			</return>
			<argument index="0" name="by" type="Vector2">
			</argument>
			<description>
				Returns this vector with each component snapped to the nearest multiple of [code]step[/code]. This can also be used to round to an arbitrary number of decimals.
			</description>
		</method>
		<method name="tangent">
			<return type="Vector2">
			</return>
			<description>
				Returns a perpendicular vector rotated 90 degrees counter-clockwise compared to the original, with the same length.
			</description>
		</method>
	</methods>
	<members>
		<member name="x" type="float" setter="" getter="" default="0.0">
			The vector's X component. Also accessible by using the index position [code][0][/code].
		</member>
		<member name="y" type="float" setter="" getter="" default="0.0">
			The vector's Y component. Also accessible by using the index position [code][1][/code].
		</member>
	</members>
	<constants>
		<constant name="AXIS_X" value="0">
			Enumerated value for the X axis.
		</constant>
		<constant name="AXIS_Y" value="1">
			Enumerated value for the Y axis.
		</constant>
		<constant name="ZERO" value="Vector2( 0, 0 )">
			Zero vector, a vector with all components set to [code]0[/code].
		</constant>
		<constant name="ONE" value="Vector2( 1, 1 )">
			One vector, a vector with all components set to [code]1[/code].
		</constant>
		<constant name="INF" value="Vector2( inf, inf )">
			Infinity vector, a vector with all components set to [constant @GDScript.INF].
		</constant>
		<constant name="LEFT" value="Vector2( -1, 0 )">
			Left unit vector. Represents the direction of left.
		</constant>
		<constant name="RIGHT" value="Vector2( 1, 0 )">
			Right unit vector. Represents the direction of right.
		</constant>
		<constant name="UP" value="Vector2( 0, -1 )">
			Up unit vector. Y is down in 2D, so this vector points -Y.
		</constant>
		<constant name="DOWN" value="Vector2( 0, 1 )">
			Down unit vector. Y is down in 2D, so this vector points +Y.
		</constant>
	</constants>
</class>
