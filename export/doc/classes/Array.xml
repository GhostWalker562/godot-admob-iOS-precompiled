<?xml version="1.0" encoding="UTF-8" ?>
<class name="Array" version="3.3">
	<brief_description>
		A generic array datatype.
	</brief_description>
	<description>
		A generic array that can contain several elements of any type, accessible by a numerical index starting at 0. Negative indices can be used to count from the back, like in Python (-1 is the last element, -2 is the second to last, etc.).
		[b]Example:[/b]
		[codeblock]
		var array = ["One", 2, 3, "Four"]
		print(array[0]) # One.
		print(array[2]) # 3.
		print(array[-1]) # Four.
		array[2] = "Three"
		print(array[-2]) # Three.
		[/codeblock]
		Arrays can be concatenated using the [code]+[/code] operator:
		[codeblock]
		var array1 = ["One", 2]
		var array2 = [3, "Four"]
		print(array1 + array2) # ["One", 2, 3, "Four"]
		[/codeblock]
		[b]Note:[/b] Concatenating with the [code]+=[/code] operator will create a new array, which has a cost. If you want to append another array to an existing array, [method append_array] is more efficient.
		[b]Note:[/b] Arrays are always passed by reference. To get a copy of an array that can be modified independently of the original array, use [method duplicate].
		[b]Note:[/b] When declaring an array with [code]const[/code], the array itself can still be mutated by defining the values at individual indices or pushing/removing elements. Using [code]const[/code] will only prevent assigning the constant with another value after it was initialized.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="Array">
			<return type="Array">
			</return>
			<argument index="0" name="from" type="PoolColorArray">
			</argument>
			<description>
				Constructs an array from a [PoolColorArray].
			</description>
		</method>
		<method name="Array">
			<return type="Array">
			</return>
			<argument index="0" name="from" type="PoolVector3Array">
			</argument>
			<description>
				Constructs an array from a [PoolVector3Array].
			</description>
		</method>
		<method name="Array">
			<return type="Array">
			</return>
			<argument index="0" name="from" type="PoolVector2Array">
			</argument>
			<description>
				Constructs an array from a [PoolVector2Array].
			</description>
		</method>
		<method name="Array">
			<return type="Array">
			</return>
			<argument index="0" name="from" type="PoolStringArray">
			</argument>
			<description>
				Constructs an array from a [PoolStringArray].
			</description>
		</method>
		<method name="Array">
			<return type="Array">
			</return>
			<argument index="0" name="from" type="PoolRealArray">
			</argument>
			<description>
				Constructs an array from a [PoolRealArray].
			</description>
		</method>
		<method name="Array">
			<return type="Array">
			</return>
			<argument index="0" name="from" type="PoolIntArray">
			</argument>
			<description>
				Constructs an array from a [PoolIntArray].
			</description>
		</method>
		<method name="Array">
			<return type="Array">
			</return>
			<argument index="0" name="from" type="PoolByteArray">
			</argument>
			<description>
				Constructs an array from a [PoolByteArray].
			</description>
		</method>
		<method name="append">
			<argument index="0" name="value" type="Variant">
			</argument>
			<description>
				Appends an element at the end of the array (alias of [method push_back]).
			</description>
		</method>
		<method name="append_array">
			<argument index="0" name="array" type="Array">
			</argument>
			<description>
				Appends another array at the end of this array.
				[codeblock]
				var array1 = [1, 2, 3]
				var array2 = [4, 5, 6]
				array1.append_array(array2)
				print(array1) # Prints [1, 2, 3, 4, 5, 6].
				[/codeblock]
			</description>
		</method>
		<method name="back">
			<return type="Variant">
			</return>
			<description>
				Returns the last element of the array. Prints an error and returns [code]null[/code] if the array is empty.
				[b]Note:[/b] Calling this function is not the same as writing [code]array[-1][/code]. If the array is empty, accessing by index will pause project execution when running from the editor.
			</description>
		</method>
		<method name="bsearch">
			<return type="int">
			</return>
			<argument index="0" name="value" type="Variant">
			</argument>
			<argument index="1" name="before" type="bool" default="true">
			</argument>
			<description>
				Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a [code]before[/code] specifier can be passed. If [code]false[/code], the returned index comes after all existing entries of the value in the array.
				[b]Note:[/b] Calling [method bsearch] on an unsorted array results in unexpected behavior.
			</description>
		</method>
		<method name="bsearch_custom">
			<return type="int">
			</return>
			<argument index="0" name="value" type="Variant">
			</argument>
			<argument index="1" name="obj" type="Object">
			</argument>
			<argument index="2" name="func" type="String">
			</argument>
			<argument index="3" name="before" type="bool" default="true">
			</argument>
			<description>
				Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search and a custom comparison method declared in the [code]obj[/code]. Optionally, a [code]before[/code] specifier can be passed. If [code]false[/code], the returned index comes after all existing entries of the value in the array. The custom method receives two arguments (an element from the array and the value searched for) and must return [code]true[/code] if the first argument is less than the second, and return [code]false[/code] otherwise.
				[codeblock]
				func cardinal_to_algebraic(a):
				    match a:
				        "one":
				            return 1
				        "two":
				            return 2
				        "three":
				            return 3
				        "four":
				            return 4
				        _:
				            return 0

				func compare(a, b):
				    return cardinal_to_algebraic(a) &lt; cardinal_to_algebraic(b)

				func _ready():
				    var a = ["one", "two", "three", "four"]
				    # `compare` is defined in this object, so we use `self` as the `obj` parameter.
				    print(a.bsearch_custom("three", self, "compare", true)) # Expected value is 2.
				[/codeblock]
				[b]Note:[/b] Calling [method bsearch_custom] on an unsorted array results in unexpected behavior.
			</description>
		</method>
		<method name="clear">
			<description>
				Clears the array. This is equivalent to using [method resize] with a size of [code]0[/code].
			</description>
		</method>
		<method name="count">
			<return type="int">
			</return>
			<argument index="0" name="value" type="Variant">
			</argument>
			<description>
				Returns the number of times an element is in the array.
			</description>
		</method>
		<method name="duplicate">
			<return type="Array">
			</return>
			<argument index="0" name="deep" type="bool" default="false">
			</argument>
			<description>
				Returns a copy of the array.
				If [code]deep[/code] is [code]true[/code], a deep copy is performed: all nested arrays and dictionaries are duplicated and will not be shared with the original array. If [code]false[/code], a shallow copy is made and references to the original nested arrays and dictionaries are kept, so that modifying a sub-array or dictionary in the copy will also impact those referenced in the source array.
			</description>
		</method>
		<method name="empty">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the array is empty.
			</description>
		</method>
		<method name="erase">
			<argument index="0" name="value" type="Variant">
			</argument>
			<description>
				Removes the first occurrence of a value from the array. To remove an element by index, use [method remove] instead.
				[b]Note:[/b] This method acts in-place and doesn't return a value.
				[b]Note:[/b] On large arrays, this method will be slower if the removed element is close to the beginning of the array (index 0). This is because all elements placed after the removed element have to be reindexed.
			</description>
		</method>
		<method name="find">
			<return type="int">
			</return>
			<argument index="0" name="what" type="Variant">
			</argument>
			<argument index="1" name="from" type="int" default="0">
			</argument>
			<description>
				Searches the array for a value and returns its index or [code]-1[/code] if not found. Optionally, the initial search index can be passed.
			</description>
		</method>
		<method name="find_last">
			<return type="int">
			</return>
			<argument index="0" name="value" type="Variant">
			</argument>
			<description>
				Searches the array in reverse order for a value and returns its index or [code]-1[/code] if not found.
			</description>
		</method>
		<method name="front">
			<return type="Variant">
			</return>
			<description>
				Returns the first element of the array. Prints an error and returns [code]null[/code] if the array is empty.
				[b]Note:[/b] Calling this function is not the same as writing [code]array[0][/code]. If the array is empty, accessing by index will pause project execution when running from the editor.
			</description>
		</method>
		<method name="has">
			<return type="bool">
			</return>
			<argument index="0" name="value" type="Variant">
			</argument>
			<description>
				Returns [code]true[/code] if the array contains the given value.
				[codeblock]
				["inside", 7].has("inside") # True
				["inside", 7].has("outside") # False
				["inside", 7].has(7) # True
				["inside", 7].has("7") # False
				[/codeblock]
				[b]Note:[/b] This is equivalent to using the [code]in[/code] operator as follows:
				[codeblock]
				# Will evaluate to `true`.
				if 2 in [2, 4, 6, 8]:
				    pass
				[/codeblock]
			</description>
		</method>
		<method name="hash">
			<return type="int">
			</return>
			<description>
				Returns a hashed integer value representing the array and its contents.
				[b]Note:[/b] Arrays with equal contents can still produce different hashes. Only the exact same arrays will produce the same hashed integer value.
			</description>
		</method>
		<method name="insert">
			<argument index="0" name="position" type="int">
			</argument>
			<argument index="1" name="value" type="Variant">
			</argument>
			<description>
				Inserts a new element at a given position in the array. The position must be valid, or at the end of the array ([code]pos == size()[/code]).
				[b]Note:[/b] This method acts in-place and doesn't return a value.
				[b]Note:[/b] On large arrays, this method will be slower if the inserted element is close to the beginning of the array (index 0). This is because all elements placed after the newly inserted element have to be reindexed.
			</description>
		</method>
		<method name="invert">
			<description>
				Reverses the order of the elements in the array.
			</description>
		</method>
		<method name="max">
			<return type="Variant">
			</return>
			<description>
				Returns the maximum value contained in the array if all elements are of comparable types. If the elements can't be compared, [code]null[/code] is returned.
			</description>
		</method>
		<method name="min">
			<return type="Variant">
			</return>
			<description>
				Returns the minimum value contained in the array if all elements are of comparable types. If the elements can't be compared, [code]null[/code] is returned.
			</description>
		</method>
		<method name="pop_back">
			<return type="Variant">
			</return>
			<description>
				Removes and returns the last element of the array. Returns [code]null[/code] if the array is empty, without printing an error message. See also [method pop_front].
			</description>
		</method>
		<method name="pop_front">
			<return type="Variant">
			</return>
			<description>
				Removes and returns the first element of the array. Returns [code]null[/code] if the array is empty, without printing an error message. See also [method pop_back].
				[b]Note:[/b] On large arrays, this method is much slower than [method pop_back] as it will reindex all the array's elements every time it's called. The larger the array, the slower [method pop_front] will be.
			</description>
		</method>
		<method name="push_back">
			<argument index="0" name="value" type="Variant">
			</argument>
			<description>
				Appends an element at the end of the array. See also [method push_front].
			</description>
		</method>
		<method name="push_front">
			<argument index="0" name="value" type="Variant">
			</argument>
			<description>
				Adds an element at the beginning of the array. See also [method push_back].
				[b]Note:[/b] On large arrays, this method is much slower than [method push_back] as it will reindex all the array's elements every time it's called. The larger the array, the slower [method push_front] will be.
			</description>
		</method>
		<method name="remove">
			<argument index="0" name="position" type="int">
			</argument>
			<description>
				Removes an element from the array by index. If the index does not exist in the array, nothing happens. To remove an element by searching for its value, use [method erase] instead.
				[b]Note:[/b] This method acts in-place and doesn't return a value.
				[b]Note:[/b] On large arrays, this method will be slower if the removed element is close to the beginning of the array (index 0). This is because all elements placed after the removed element have to be reindexed.
			</description>
		</method>
		<method name="resize">
			<argument index="0" name="size" type="int">
			</argument>
			<description>
				Resizes the array to contain a different number of elements. If the array size is smaller, elements are cleared, if bigger, new elements are [code]null[/code].
			</description>
		</method>
		<method name="rfind">
			<return type="int">
			</return>
			<argument index="0" name="what" type="Variant">
			</argument>
			<argument index="1" name="from" type="int" default="-1">
			</argument>
			<description>
				Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.
			</description>
		</method>
		<method name="shuffle">
			<description>
				Shuffles the array such that the items will have a random order. This method uses the global random number generator common to methods such as [method @GDScript.randi]. Call [method @GDScript.randomize] to ensure that a new seed will be used each time if you want non-reproducible shuffling.
			</description>
		</method>
		<method name="size">
			<return type="int">
			</return>
			<description>
				Returns the number of elements in the array.
			</description>
		</method>
		<method name="slice">
			<return type="Array">
			</return>
			<argument index="0" name="begin" type="int">
			</argument>
			<argument index="1" name="end" type="int">
			</argument>
			<argument index="2" name="step" type="int" default="1">
			</argument>
			<argument index="3" name="deep" type="bool" default="false">
			</argument>
			<description>
				Duplicates the subset described in the function and returns it in an array, deeply copying the array if [code]deep[/code] is [code]true[/code]. Lower and upper index are inclusive, with the [code]step[/code] describing the change between indices while slicing.
			</description>
		</method>
		<method name="sort">
			<description>
				Sorts the array.
				[b]Note:[/b] Strings are sorted in alphabetical order (as opposed to natural order). This may lead to unexpected behavior when sorting an array of strings ending with a sequence of numbers. Consider the following example:
				[codeblock]
				var strings = ["string1", "string2", "string10", "string11"]
				strings.sort()
				print(strings) # Prints [string1, string10, string11, string2]
				[/codeblock]
			</description>
		</method>
		<method name="sort_custom">
			<argument index="0" name="obj" type="Object">
			</argument>
			<argument index="1" name="func" type="String">
			</argument>
			<description>
				Sorts the array using a custom method. The arguments are an object that holds the method and the name of such method. The custom method receives two arguments (a pair of elements from the array) and must return either [code]true[/code] or [code]false[/code].
				For two elements [code]a[/code] and [code]b[/code], if the given method returns [code]true[/code], element [code]b[/code] will be after element [code]a[/code] in the array.
				[b]Note:[/b] you cannot randomize the return value as the heapsort algorithm expects a deterministic result. Doing so will result in unexpected behavior.
				[codeblock]
				class MyCustomSorter:
				    static func sort_ascending(a, b):
				        if a[0] &lt; b[0]:
				            return true
				        return false

				var my_items = [[5, "Potato"], [9, "Rice"], [4, "Tomato"]]
				my_items.sort_custom(MyCustomSorter, "sort_ascending")
				print(my_items) # Prints [[4, Tomato], [5, Potato], [9, Rice]].
				[/codeblock]
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
