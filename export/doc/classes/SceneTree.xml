<?xml version="1.0" encoding="UTF-8" ?>
<class name="SceneTree" inherits="MainLoop" version="3.3">
	<brief_description>
		Manages the game loop via a hierarchy of nodes.
	</brief_description>
	<description>
		As one of the most important classes, the [SceneTree] manages the hierarchy of nodes in a scene as well as scenes themselves. Nodes can be added, retrieved and removed. The whole scene tree (and thus the current scene) can be paused. Scenes can be loaded, switched and reloaded.
		You can also use the [SceneTree] to organize your nodes into groups: every node can be assigned as many groups as you want to create, e.g. an "enemy" group. You can then iterate these groups or even call methods and set properties on all the group's members at once.
		[SceneTree] is the default [MainLoop] implementation used by scenes, and is thus in charge of the game loop.
	</description>
	<tutorials>
		<link>https://docs.godotengine.org/en/3.3/getting_started/step_by_step/scene_tree.html</link>
		<link>https://docs.godotengine.org/en/3.3/tutorials/viewports/multiple_resolutions.html</link>
	</tutorials>
	<methods>
		<method name="call_group" qualifiers="vararg">
			<return type="Variant">
			</return>
			<argument index="0" name="group" type="String">
			</argument>
			<argument index="1" name="method" type="String">
			</argument>
			<description>
				Calls [code]method[/code] on each member of the given group. You can pass arguments to [code]method[/code] by specifying them at the end of the method call.
				[b]Note:[/b] [code]method[/code] may only have 5 arguments at most (7 arguments passed to this method in total).
				[b]Note:[/b] [method call_group] will always call methods with an one-frame delay, in a way similar to [method Object.call_deferred]. To call methods immediately, use [method call_group_flags] with the [constant GROUP_CALL_REALTIME] flag.
			</description>
		</method>
		<method name="call_group_flags" qualifiers="vararg">
			<return type="Variant">
			</return>
			<argument index="0" name="flags" type="int">
			</argument>
			<argument index="1" name="group" type="String">
			</argument>
			<argument index="2" name="method" type="String">
			</argument>
			<description>
				Calls [code]method[/code] on each member of the given group, respecting the given [enum GroupCallFlags]. You can pass arguments to [code]method[/code] by specifying them at the end of the method call.
				[b]Note:[/b] [code]method[/code] may only have 5 arguments at most (8 arguments passed to this method in total).
				[b]Note:[/b] Group call flags are used to control the method calling behavior. If the [constant GROUP_CALL_REALTIME] flag is present in the [code]flags[/code] argument, methods will be called immediately. If this flag isn't present in [code]flags[/code], methods will be called with a one-frame delay in a way similar to [method call_group].
			</description>
		</method>
		<method name="change_scene">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
				Changes the running scene to the one at the given [code]path[/code], after loading it into a [PackedScene] and creating a new instance.
				Returns [constant OK] on success, [constant ERR_CANT_OPEN] if the [code]path[/code] cannot be loaded into a [PackedScene], or [constant ERR_CANT_CREATE] if that scene cannot be instantiated.
				[b]Note:[/b] The scene change is deferred, which means that the new scene node is added on the next idle frame. You won't be able to access it immediately after the [method change_scene] call.
			</description>
		</method>
		<method name="change_scene_to">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="packed_scene" type="PackedScene">
			</argument>
			<description>
				Changes the running scene to a new instance of the given [PackedScene].
				Returns [constant OK] on success or [constant ERR_CANT_CREATE] if the scene cannot be instantiated.
				[b]Note:[/b] The scene change is deferred, which means that the new scene node is added on the next idle frame. You won't be able to access it immediately after the [method change_scene_to] call.
			</description>
		</method>
		<method name="create_timer">
			<return type="SceneTreeTimer">
			</return>
			<argument index="0" name="time_sec" type="float">
			</argument>
			<argument index="1" name="pause_mode_process" type="bool" default="true">
			</argument>
			<description>
				Returns a [SceneTreeTimer] which will [signal SceneTreeTimer.timeout] after the given time in seconds elapsed in this [SceneTree]. If [code]pause_mode_process[/code] is set to [code]false[/code], pausing the [SceneTree] will also pause the timer.
				Commonly used to create a one-shot delay timer as in the following example:
				[codeblock]
				func some_function():
				    print("start")
				    yield(get_tree().create_timer(1.0), "timeout")
				    print("end")
				[/codeblock]
				The timer will be automatically freed after its time elapses.
			</description>
		</method>
		<method name="get_frame" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the current frame number, i.e. the total frame count since the application started.
			</description>
		</method>
		<method name="get_network_connected_peers" qualifiers="const">
			<return type="PoolIntArray">
			</return>
			<description>
				Returns the peer IDs of all connected peers of this [SceneTree]'s [member network_peer].
			</description>
		</method>
		<method name="get_network_unique_id" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the unique peer ID of this [SceneTree]'s [member network_peer].
			</description>
		</method>
		<method name="get_node_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the number of nodes in this [SceneTree].
			</description>
		</method>
		<method name="get_nodes_in_group">
			<return type="Array">
			</return>
			<argument index="0" name="group" type="String">
			</argument>
			<description>
				Returns a list of all nodes assigned to the given group.
			</description>
		</method>
		<method name="get_rpc_sender_id" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the sender's peer ID for the most recently received RPC call.
			</description>
		</method>
		<method name="has_group" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
				Returns [code]true[/code] if the given group exists.
			</description>
		</method>
		<method name="has_network_peer" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if there is a [member network_peer] set.
			</description>
		</method>
		<method name="is_input_handled">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the most recent [InputEvent] was marked as handled with [method set_input_as_handled].
			</description>
		</method>
		<method name="is_network_server" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if this [SceneTree]'s [member network_peer] is in server mode (listening for connections).
			</description>
		</method>
		<method name="notify_group">
			<return type="void">
			</return>
			<argument index="0" name="group" type="String">
			</argument>
			<argument index="1" name="notification" type="int">
			</argument>
			<description>
				Sends the given notification to all members of the [code]group[/code].
			</description>
		</method>
		<method name="notify_group_flags">
			<return type="void">
			</return>
			<argument index="0" name="call_flags" type="int">
			</argument>
			<argument index="1" name="group" type="String">
			</argument>
			<argument index="2" name="notification" type="int">
			</argument>
			<description>
				Sends the given notification to all members of the [code]group[/code], respecting the given [enum GroupCallFlags].
			</description>
		</method>
		<method name="queue_delete">
			<return type="void">
			</return>
			<argument index="0" name="obj" type="Object">
			</argument>
			<description>
				Queues the given object for deletion, delaying the call to [method Object.free] to after the current frame.
			</description>
		</method>
		<method name="quit">
			<return type="void">
			</return>
			<argument index="0" name="exit_code" type="int" default="-1">
			</argument>
			<description>
				Quits the application at the end of the current iteration. A process [code]exit_code[/code] can optionally be passed as an argument. If this argument is [code]0[/code] or greater, it will override the [member OS.exit_code] defined before quitting the application.
				[b]Note:[/b] On iOS this method doesn't work. Instead, as recommended by the iOS Human Interface Guidelines, the user is expected to close apps via the Home button.
			</description>
		</method>
		<method name="reload_current_scene">
			<return type="int" enum="Error">
			</return>
			<description>
				Reloads the currently active scene.
				Returns [constant OK] on success, [constant ERR_UNCONFIGURED] if no [member current_scene] was defined yet, [constant ERR_CANT_OPEN] if [member current_scene] cannot be loaded into a [PackedScene], or [constant ERR_CANT_CREATE] if the scene cannot be instantiated.
			</description>
		</method>
		<method name="set_auto_accept_quit">
			<return type="void">
			</return>
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
				If [code]true[/code], the application automatically accepts quitting. Enabled by default.
				For mobile platforms, see [method set_quit_on_go_back].
			</description>
		</method>
		<method name="set_group">
			<return type="void">
			</return>
			<argument index="0" name="group" type="String">
			</argument>
			<argument index="1" name="property" type="String">
			</argument>
			<argument index="2" name="value" type="Variant">
			</argument>
			<description>
				Sets the given [code]property[/code] to [code]value[/code] on all members of the given group.
			</description>
		</method>
		<method name="set_group_flags">
			<return type="void">
			</return>
			<argument index="0" name="call_flags" type="int">
			</argument>
			<argument index="1" name="group" type="String">
			</argument>
			<argument index="2" name="property" type="String">
			</argument>
			<argument index="3" name="value" type="Variant">
			</argument>
			<description>
				Sets the given [code]property[/code] to [code]value[/code] on all members of the given group, respecting the given [enum GroupCallFlags].
			</description>
		</method>
		<method name="set_input_as_handled">
			<return type="void">
			</return>
			<description>
				Marks the most recent [InputEvent] as handled.
			</description>
		</method>
		<method name="set_quit_on_go_back">
			<return type="void">
			</return>
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
				If [code]true[/code], the application quits automatically on going back (e.g. on Android). Enabled by default.
				To handle 'Go Back' button when this option is disabled, use [constant MainLoop.NOTIFICATION_WM_GO_BACK_REQUEST].
			</description>
		</method>
		<method name="set_screen_stretch">
			<return type="void">
			</return>
			<argument index="0" name="mode" type="int" enum="SceneTree.StretchMode">
			</argument>
			<argument index="1" name="aspect" type="int" enum="SceneTree.StretchAspect">
			</argument>
			<argument index="2" name="minsize" type="Vector2">
			</argument>
			<argument index="3" name="shrink" type="float" default="1">
			</argument>
			<description>
				Configures screen stretching to the given [enum StretchMode], [enum StretchAspect], minimum size and [code]shrink[/code] ratio.
			</description>
		</method>
	</methods>
	<members>
		<member name="current_scene" type="Node" setter="set_current_scene" getter="get_current_scene">
			The current scene.
		</member>
		<member name="debug_collisions_hint" type="bool" setter="set_debug_collisions_hint" getter="is_debugging_collisions_hint" default="false">
			If [code]true[/code], collision shapes will be visible when running the game from the editor for debugging purposes.
		</member>
		<member name="debug_navigation_hint" type="bool" setter="set_debug_navigation_hint" getter="is_debugging_navigation_hint" default="false">
			If [code]true[/code], navigation polygons will be visible when running the game from the editor for debugging purposes.
		</member>
		<member name="edited_scene_root" type="Node" setter="set_edited_scene_root" getter="get_edited_scene_root">
			The root of the edited scene.
		</member>
		<member name="multiplayer" type="MultiplayerAPI" setter="set_multiplayer" getter="get_multiplayer">
			The default [MultiplayerAPI] instance for this [SceneTree].
		</member>
		<member name="multiplayer_poll" type="bool" setter="set_multiplayer_poll_enabled" getter="is_multiplayer_poll_enabled" default="true">
			If [code]true[/code] (default value), enables automatic polling of the [MultiplayerAPI] for this SceneTree during [signal idle_frame].
			If [code]false[/code], you need to manually call [method MultiplayerAPI.poll] to process network packets and deliver RPCs/RSETs. This allows running RPCs/RSETs in a different loop (e.g. physics, thread, specific time step) and for manual [Mutex] protection when accessing the [MultiplayerAPI] from threads.
		</member>
		<member name="network_peer" type="NetworkedMultiplayerPeer" setter="set_network_peer" getter="get_network_peer">
			The peer object to handle the RPC system (effectively enabling networking when set). Depending on the peer itself, the [SceneTree] will become a network server (check with [method is_network_server]) and will set the root node's network mode to master, or it will become a regular peer with the root node set to puppet. All child nodes are set to inherit the network mode by default. Handling of networking-related events (connection, disconnection, new clients) is done by connecting to [SceneTree]'s signals.
		</member>
		<member name="paused" type="bool" setter="set_pause" getter="is_paused" default="false">
			If [code]true[/code], the [SceneTree] is paused. Doing so will have the following behavior:
			- 2D and 3D physics will be stopped.
			- [method Node._process], [method Node._physics_process] and [method Node._input] will not be called anymore in nodes.
		</member>
		<member name="refuse_new_network_connections" type="bool" setter="set_refuse_new_network_connections" getter="is_refusing_new_network_connections" default="false">
			If [code]true[/code], the [SceneTree]'s [member network_peer] refuses new incoming connections.
		</member>
		<member name="root" type="Viewport" setter="" getter="get_root">
			The [SceneTree]'s root [Viewport].
		</member>
		<member name="use_font_oversampling" type="bool" setter="set_use_font_oversampling" getter="is_using_font_oversampling" default="false">
			If [code]true[/code], font oversampling is used.
		</member>
	</members>
	<signals>
		<signal name="connected_to_server">
			<description>
				Emitted whenever this [SceneTree]'s [member network_peer] successfully connected to a server. Only emitted on clients.
			</description>
		</signal>
		<signal name="connection_failed">
			<description>
				Emitted whenever this [SceneTree]'s [member network_peer] fails to establish a connection to a server. Only emitted on clients.
			</description>
		</signal>
		<signal name="files_dropped">
			<argument index="0" name="files" type="PoolStringArray">
			</argument>
			<argument index="1" name="screen" type="int">
			</argument>
			<description>
				Emitted when files are dragged from the OS file manager and dropped in the game window. The arguments are a list of file paths and the identifier of the screen where the drag originated.
			</description>
		</signal>
		<signal name="global_menu_action">
			<argument index="0" name="id" type="Variant">
			</argument>
			<argument index="1" name="meta" type="Variant">
			</argument>
			<description>
				Emitted whenever global menu item is clicked.
			</description>
		</signal>
		<signal name="idle_frame">
			<description>
				Emitted immediately before [method Node._process] is called on every node in the [SceneTree].
			</description>
		</signal>
		<signal name="network_peer_connected">
			<argument index="0" name="id" type="int">
			</argument>
			<description>
				Emitted whenever this [SceneTree]'s [member network_peer] connects with a new peer. ID is the peer ID of the new peer. Clients get notified when other clients connect to the same server. Upon connecting to a server, a client also receives this signal for the server (with ID being 1).
			</description>
		</signal>
		<signal name="network_peer_disconnected">
			<argument index="0" name="id" type="int">
			</argument>
			<description>
				Emitted whenever this [SceneTree]'s [member network_peer] disconnects from a peer. Clients get notified when other clients disconnect from the same server.
			</description>
		</signal>
		<signal name="node_added">
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
				Emitted whenever a node is added to the [SceneTree].
			</description>
		</signal>
		<signal name="node_configuration_warning_changed">
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
				Emitted when a node's configuration changed. Only emitted in [code]tool[/code] mode.
			</description>
		</signal>
		<signal name="node_removed">
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
				Emitted whenever a node is removed from the [SceneTree].
			</description>
		</signal>
		<signal name="node_renamed">
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
				Emitted whenever a node is renamed.
			</description>
		</signal>
		<signal name="physics_frame">
			<description>
				Emitted immediately before [method Node._physics_process] is called on every node in the [SceneTree].
			</description>
		</signal>
		<signal name="screen_resized">
			<description>
				Emitted when the screen resolution (fullscreen) or window size (windowed) changes.
			</description>
		</signal>
		<signal name="server_disconnected">
			<description>
				Emitted whenever this [SceneTree]'s [member network_peer] disconnected from server. Only emitted on clients.
			</description>
		</signal>
		<signal name="tree_changed">
			<description>
				Emitted whenever the [SceneTree] hierarchy changed (children being moved or renamed, etc.).
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="GROUP_CALL_DEFAULT" value="0" enum="GroupCallFlags">
			Call a group with no flags (default).
		</constant>
		<constant name="GROUP_CALL_REVERSE" value="1" enum="GroupCallFlags">
			Call a group in reverse scene order.
		</constant>
		<constant name="GROUP_CALL_REALTIME" value="2" enum="GroupCallFlags">
			Call a group immediately (calls are normally made on idle).
		</constant>
		<constant name="GROUP_CALL_UNIQUE" value="4" enum="GroupCallFlags">
			Call a group only once even if the call is executed many times.
		</constant>
		<constant name="STRETCH_MODE_DISABLED" value="0" enum="StretchMode">
			No stretching.
		</constant>
		<constant name="STRETCH_MODE_2D" value="1" enum="StretchMode">
			Render stretching in higher resolution (interpolated).
		</constant>
		<constant name="STRETCH_MODE_VIEWPORT" value="2" enum="StretchMode">
			Keep the specified display resolution. No interpolation. Content may appear pixelated.
		</constant>
		<constant name="STRETCH_ASPECT_IGNORE" value="0" enum="StretchAspect">
			Fill the window with the content stretched to cover excessive space. Content may appear stretched.
		</constant>
		<constant name="STRETCH_ASPECT_KEEP" value="1" enum="StretchAspect">
			Retain the same aspect ratio by padding with black bars on either axis. This prevents distortion.
		</constant>
		<constant name="STRETCH_ASPECT_KEEP_WIDTH" value="2" enum="StretchAspect">
			Expand vertically. Left/right black bars may appear if the window is too wide.
		</constant>
		<constant name="STRETCH_ASPECT_KEEP_HEIGHT" value="3" enum="StretchAspect">
			Expand horizontally. Top/bottom black bars may appear if the window is too tall.
		</constant>
		<constant name="STRETCH_ASPECT_EXPAND" value="4" enum="StretchAspect">
			Expand in both directions, retaining the same aspect ratio. This prevents distortion while avoiding black bars.
		</constant>
	</constants>
</class>
