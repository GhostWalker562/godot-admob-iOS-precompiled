<?xml version="1.0" encoding="UTF-8" ?>
<class name="Navigation" inherits="Spatial" version="3.3">
	<brief_description>
		Mesh-based navigation and pathfinding node.
	</brief_description>
	<description>
		Provides navigation and pathfinding within a collection of [NavigationMesh]es. By default, these will be automatically collected from child [NavigationMeshInstance] nodes, but they can also be added on the fly with [method navmesh_add]. In addition to basic pathfinding, this class also assists with aligning navigation agents with the meshes they are navigating on.
		[b]Note:[/b] The current navigation system has many known issues and will not always return optimal paths as expected. These issues will be fixed in Godot 4.0.
	</description>
	<tutorials>
		<link title="3D Navmesh Demo">https://godotengine.org/asset-library/asset/124</link>
	</tutorials>
	<methods>
		<method name="get_closest_point">
			<return type="Vector3">
			</return>
			<argument index="0" name="to_point" type="Vector3">
			</argument>
			<description>
				Returns the navigation point closest to the point given. Points are in local coordinate space.
			</description>
		</method>
		<method name="get_closest_point_normal">
			<return type="Vector3">
			</return>
			<argument index="0" name="to_point" type="Vector3">
			</argument>
			<description>
				Returns the surface normal at the navigation point closest to the point given. Useful for rotating a navigation agent according to the navigation mesh it moves on.
			</description>
		</method>
		<method name="get_closest_point_owner">
			<return type="Object">
			</return>
			<argument index="0" name="to_point" type="Vector3">
			</argument>
			<description>
				Returns the owner of the [NavigationMesh] which contains the navigation point closest to the point given. This is usually a [NavigationMeshInstance]. For meshes added via [method navmesh_add], returns the owner that was given (or [code]null[/code] if the [code]owner[/code] parameter was omitted).
			</description>
		</method>
		<method name="get_closest_point_to_segment">
			<return type="Vector3">
			</return>
			<argument index="0" name="start" type="Vector3">
			</argument>
			<argument index="1" name="end" type="Vector3">
			</argument>
			<argument index="2" name="use_collision" type="bool" default="false">
			</argument>
			<description>
				Returns the navigation point closest to the given line segment. When enabling [code]use_collision[/code], only considers intersection points between segment and navigation meshes. If multiple intersection points are found, the one closest to the segment start point is returned.
			</description>
		</method>
		<method name="get_simple_path">
			<return type="PoolVector3Array">
			</return>
			<argument index="0" name="start" type="Vector3">
			</argument>
			<argument index="1" name="end" type="Vector3">
			</argument>
			<argument index="2" name="optimize" type="bool" default="true">
			</argument>
			<description>
				Returns the path between two given points. Points are in local coordinate space. If [code]optimize[/code] is [code]true[/code] (the default), the agent properties associated with each [NavigationMesh] (radius, height, etc.) are considered in the path calculation, otherwise they are ignored.
				[b]Note:[/b] This method has known issues and will often return non-optimal paths. These issues will be fixed in Godot 4.0.
			</description>
		</method>
		<method name="navmesh_add">
			<return type="int">
			</return>
			<argument index="0" name="mesh" type="NavigationMesh">
			</argument>
			<argument index="1" name="xform" type="Transform">
			</argument>
			<argument index="2" name="owner" type="Object" default="null">
			</argument>
			<description>
				Adds a [NavigationMesh]. Returns an ID for use with [method navmesh_remove] or [method navmesh_set_transform]. If given, a [Transform2D] is applied to the polygon. The optional [code]owner[/code] is used as return value for [method get_closest_point_owner].
			</description>
		</method>
		<method name="navmesh_remove">
			<return type="void">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
				Removes the [NavigationMesh] with the given ID.
			</description>
		</method>
		<method name="navmesh_set_transform">
			<return type="void">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="xform" type="Transform">
			</argument>
			<description>
				Sets the transform applied to the [NavigationMesh] with the given ID.
			</description>
		</method>
	</methods>
	<members>
		<member name="up_vector" type="Vector3" setter="set_up_vector" getter="get_up_vector" default="Vector3( 0, 1, 0 )">
			Defines which direction is up. By default, this is [code](0, 1, 0)[/code], which is the world's "up" direction.
		</member>
	</members>
	<constants>
	</constants>
</class>
