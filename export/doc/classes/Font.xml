<?xml version="1.0" encoding="UTF-8" ?>
<class name="Font" inherits="Resource" version="3.3">
	<brief_description>
		Internationalized font and text drawing support.
	</brief_description>
	<description>
		Font contains a Unicode-compatible character set, as well as the ability to draw it with variable width, ascent, descent and kerning. For creating fonts from TTF files (or other font formats), see the editor support for fonts.
		[b]Note:[/b] If a DynamicFont doesn't contain a character used in a string, the character in question will be replaced with codepoint [code]0xfffd[/code] if it's available in the DynamicFont. If this replacement character isn't available in the DynamicFont, the character will be hidden without displaying any replacement character in the string.
		[b]Note:[/b] If a BitmapFont doesn't contain a character used in a string, the character in question will be hidden without displaying any replacement character in the string.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="draw" qualifiers="const">
			<return type="void">
			</return>
			<argument index="0" name="canvas_item" type="RID">
			</argument>
			<argument index="1" name="position" type="Vector2">
			</argument>
			<argument index="2" name="string" type="String">
			</argument>
			<argument index="3" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )">
			</argument>
			<argument index="4" name="clip_w" type="int" default="-1">
			</argument>
			<argument index="5" name="outline_modulate" type="Color" default="Color( 1, 1, 1, 1 )">
			</argument>
			<description>
				Draw [code]string[/code] into a canvas item using the font at a given position, with [code]modulate[/code] color, and optionally clipping the width. [code]position[/code] specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis.
				See also [method CanvasItem.draw_string].
			</description>
		</method>
		<method name="draw_char" qualifiers="const">
			<return type="float">
			</return>
			<argument index="0" name="canvas_item" type="RID">
			</argument>
			<argument index="1" name="position" type="Vector2">
			</argument>
			<argument index="2" name="char" type="int">
			</argument>
			<argument index="3" name="next" type="int" default="-1">
			</argument>
			<argument index="4" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )">
			</argument>
			<argument index="5" name="outline" type="bool" default="false">
			</argument>
			<description>
				Draw character [code]char[/code] into a canvas item using the font at a given position, with [code]modulate[/code] color, and optionally kerning if [code]next[/code] is passed. clipping the width. [code]position[/code] specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis. The width used by the character is returned, making this function useful for drawing strings character by character.
			</description>
		</method>
		<method name="get_ascent" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Returns the font ascent (number of pixels above the baseline).
			</description>
		</method>
		<method name="get_char_size" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="char" type="int">
			</argument>
			<argument index="1" name="next" type="int" default="0">
			</argument>
			<description>
				Returns the size of a character, optionally taking kerning into account if the next character is provided. Note that the height returned is the font height (see [method get_height]) and has no relation to the glyph height.
			</description>
		</method>
		<method name="get_descent" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Returns the font descent (number of pixels below the baseline).
			</description>
		</method>
		<method name="get_height" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Returns the total font height (ascent plus descent) in pixels.
			</description>
		</method>
		<method name="get_string_size" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="string" type="String">
			</argument>
			<description>
				Returns the size of a string, taking kerning and advance into account. Note that the height returned is the font height (see [method get_height]) and has no relation to the string.
			</description>
		</method>
		<method name="get_wordwrap_string_size" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="string" type="String">
			</argument>
			<argument index="1" name="width" type="float">
			</argument>
			<description>
				Returns the size that the string would have with word wrapping enabled with a fixed [code]width[/code].
			</description>
		</method>
		<method name="has_outline" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the font has an outline.
			</description>
		</method>
		<method name="is_distance_field_hint" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="update_changes">
			<return type="void">
			</return>
			<description>
				After editing a font (changing size, ascent, char rects, etc.). Call this function to propagate changes to controls that might use it.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
