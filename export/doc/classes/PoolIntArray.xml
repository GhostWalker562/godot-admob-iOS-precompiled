<?xml version="1.0" encoding="UTF-8" ?>
<class name="PoolIntArray" version="3.3">
	<brief_description>
		A pooled [Array] of integers ([int]).
	</brief_description>
	<description>
		An [Array] specifically designed to hold integer values ([int]). Optimized for memory usage, does not fragment the memory.
		[b]Note:[/b] This type is passed by value and not by reference.
		[b]Note:[/b] This type is limited to signed 32-bit integers, which means it can only take values in the interval [code][-2^31, 2^31 - 1][/code], i.e. [code][-2147483648, 2147483647][/code]. Exceeding those bounds will wrap around. In comparison, [int] uses signed 64-bit integers which can hold much larger values.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="PoolIntArray">
			<return type="PoolIntArray">
			</return>
			<argument index="0" name="from" type="Array">
			</argument>
			<description>
				Constructs a new [PoolIntArray]. Optionally, you can pass in a generic [Array] that will be converted.
			</description>
		</method>
		<method name="append">
			<argument index="0" name="integer" type="int">
			</argument>
			<description>
				Appends an element at the end of the array (alias of [method push_back]).
			</description>
		</method>
		<method name="append_array">
			<argument index="0" name="array" type="PoolIntArray">
			</argument>
			<description>
				Appends a [PoolIntArray] at the end of this array.
			</description>
		</method>
		<method name="empty">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the array is empty.
			</description>
		</method>
		<method name="insert">
			<return type="int">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="integer" type="int">
			</argument>
			<description>
				Inserts a new int at a given position in the array. The position must be valid, or at the end of the array ([code]idx == size()[/code]).
			</description>
		</method>
		<method name="invert">
			<description>
				Reverses the order of the elements in the array.
			</description>
		</method>
		<method name="push_back">
			<argument index="0" name="integer" type="int">
			</argument>
			<description>
				Appends a value to the array.
			</description>
		</method>
		<method name="remove">
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
				Removes an element from the array by index.
			</description>
		</method>
		<method name="resize">
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
				Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size.
			</description>
		</method>
		<method name="set">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="integer" type="int">
			</argument>
			<description>
				Changes the int at the given index.
			</description>
		</method>
		<method name="size">
			<return type="int">
			</return>
			<description>
				Returns the array size.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
