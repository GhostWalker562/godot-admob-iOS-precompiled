<?xml version="1.0" encoding="UTF-8" ?>
<class name="Shape2D" inherits="Resource" version="3.3">
	<brief_description>
		Base class for all 2D shapes.
	</brief_description>
	<description>
		Base class for all 2D shapes. All 2D shape types inherit from this.
	</description>
	<tutorials>
		<link>https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html</link>
	</tutorials>
	<methods>
		<method name="collide">
			<return type="bool">
			</return>
			<argument index="0" name="local_xform" type="Transform2D">
			</argument>
			<argument index="1" name="with_shape" type="Shape2D">
			</argument>
			<argument index="2" name="shape_xform" type="Transform2D">
			</argument>
			<description>
				Returns [code]true[/code] if this shape is colliding with another.
				This method needs the transformation matrix for this shape ([code]local_xform[/code]), the shape to check collisions with ([code]with_shape[/code]), and the transformation matrix of that shape ([code]shape_xform[/code]).
			</description>
		</method>
		<method name="collide_and_get_contacts">
			<return type="Array">
			</return>
			<argument index="0" name="local_xform" type="Transform2D">
			</argument>
			<argument index="1" name="with_shape" type="Shape2D">
			</argument>
			<argument index="2" name="shape_xform" type="Transform2D">
			</argument>
			<description>
				Returns a list of the points where this shape touches another. If there are no collisions the list is empty.
				This method needs the transformation matrix for this shape ([code]local_xform[/code]), the shape to check collisions with ([code]with_shape[/code]), and the transformation matrix of that shape ([code]shape_xform[/code]).
			</description>
		</method>
		<method name="collide_with_motion">
			<return type="bool">
			</return>
			<argument index="0" name="local_xform" type="Transform2D">
			</argument>
			<argument index="1" name="local_motion" type="Vector2">
			</argument>
			<argument index="2" name="with_shape" type="Shape2D">
			</argument>
			<argument index="3" name="shape_xform" type="Transform2D">
			</argument>
			<argument index="4" name="shape_motion" type="Vector2">
			</argument>
			<description>
				Returns whether this shape would collide with another, if a given movement was applied.
				This method needs the transformation matrix for this shape ([code]local_xform[/code]), the movement to test on this shape ([code]local_motion[/code]), the shape to check collisions with ([code]with_shape[/code]), the transformation matrix of that shape ([code]shape_xform[/code]), and the movement to test onto the other object ([code]shape_motion[/code]).
			</description>
		</method>
		<method name="collide_with_motion_and_get_contacts">
			<return type="Array">
			</return>
			<argument index="0" name="local_xform" type="Transform2D">
			</argument>
			<argument index="1" name="local_motion" type="Vector2">
			</argument>
			<argument index="2" name="with_shape" type="Shape2D">
			</argument>
			<argument index="3" name="shape_xform" type="Transform2D">
			</argument>
			<argument index="4" name="shape_motion" type="Vector2">
			</argument>
			<description>
				Returns a list of the points where this shape would touch another, if a given movement was applied. If there are no collisions the list is empty.
				This method needs the transformation matrix for this shape ([code]local_xform[/code]), the movement to test on this shape ([code]local_motion[/code]), the shape to check collisions with ([code]with_shape[/code]), the transformation matrix of that shape ([code]shape_xform[/code]), and the movement to test onto the other object ([code]shape_motion[/code]).
			</description>
		</method>
		<method name="draw">
			<return type="void">
			</return>
			<argument index="0" name="canvas_item" type="RID">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<description>
				Draws a solid shape onto a [CanvasItem] with the [VisualServer] API filled with the specified [code]color[/code]. The exact drawing method is specific for each shape and cannot be configured.
			</description>
		</method>
	</methods>
	<members>
		<member name="custom_solver_bias" type="float" setter="set_custom_solver_bias" getter="get_custom_solver_bias" default="0.0">
			The shape's custom solver bias.
		</member>
	</members>
	<constants>
	</constants>
</class>
